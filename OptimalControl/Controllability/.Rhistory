legend("topleft", c("x1", "x2"), lty = c(1,2),title = "Exact Solution")
plot(t.plot, out[,2] , type = "n")
lines(t.plot, out[,2], lty = 1)
lines(t.plot, out[,3], lty =2)
legend("topleft", c("x1", "x2"), lty = c(1,2),title = "Numerical Solution")
plot(t.plot, x1.plot / out[,2] , type = "n")
lines(t.plot, x1.plot / out[,2] , lty = 1)
legend("topright", c("x1"), lty = c(1),title = "Difference Exact-Numerical")
plot(t.plot, x2.plot / out[,3] , type = "n")
lines(t.plot, x2.plot / out[,3] , lty =2)
legend("bottomright", c("x2"), lty = c(2),title = "Difference Exact-Numerical")
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
as.data.frame(c(1,2))
as.data.frame(c(1,2),c(4,5))
as.data.frame([c(1,2),c(4,5)])
as.data.frame(c(c(1,2),c(4,5)))
as.data.frame(matrix(c(1,2),c(4,5)))
as.data.frame(c(1,2,3))
test <- as.data.frame(c(1,2,3))
test
test$neu <- c(7,8,9)
test
test <- as.data.frame()
output <- as.data.frame(out[,1], "Time")
output <- as.data.frame(out[1,], "Time")
output <- as.data.frame(out[,1])
output.head()
output.head
head(output)
output <- as.data.frame(out[1,])
head(output)
output <- as.data.frame(out[,1], 'time')
head(output)
output <- as.data.frame(out[,1],row.names = c('time'))
output <- as.data.frame(list(out[,1]),row.names = c('time'))
head(output)
output <- as.data.frame(out[,1],row.names = 'time')
head(output)
output <- as.data.frame(out[,1])
head(output)
output$x1 <- out[,2]
head(output)
output$t <- as.data.frame(out[,1])
head(output)
output$x1 <- out[,2]
output$x2 <- out[,3]
head(output)
output$x1 <- out[,2]
head(output)
output <- as.data.frame(out[,1])
head(output)
output$x1 <- out[,2]
output$x2 <- out[,3]
head(output)
output <- as.data.frame(out[,1],out[,2],out[,3])
output <- as.data.frame(out[,1],out[,2],out[,3], row.names = NULL)
output <- as.data.frame("t" = out[,1],"x1" = out[,2], "x2" = out[,3])
head(output)
output <- data.frame("t" = out[,1],"x1" = out[,2], "x2" = out[,3])
head(output)
write.tavle(output, "C:\Users\kahl\Documents\R\Data\data.txt", sep = "\t")
output <- data.frame("t" = out[,1],"x1" = out[,2], "x2" = out[,3])
write.tavle(output, "C:\Users\kahl\Documents\R\Data\data.txt", sep = "\t")
write.tavle(output, r"C:\Users\kahl\Documents\R\Data\data.txt", sep = "\t")
write.tavle(output, "C:/Users/kahl/Documents/R/Data/data.txt", sep = "\t")
write.table(output, "C:/Users/kahl/Documents/R/Data/data.txt", sep = "\t")
w1.plot <- sapply(out[,1], input.hidden.1 )
plot(out[,1], w1.plot, type = "n")
lines(out[,1,w1.plot, lty = 1])
legend("topleft", )
plot(out[,1], w1.plot, type = "n")
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
head(out[,1])
head(out[,2])
head(out[,3])
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test.R', echo=TRUE)
inputstring.system.3 <- "x2"
inputstring.system.3
inputstring.system.3[1]
inputstring.system.3[2]
inputstring.system.3[,1]
inputstring.system.3["x2"]
inputstring.system.3["x2"]
inputstring.system.3[]
inputstring.system.3.value
value()
library(deSolve)
library(deSolve)
parameters = c(5, 2,1)
x0 = c( 0 , 0 ,0, 0)
testModel <- function(t,x,parameters) {
A        = parameters[1];
omega    = parameters[2];
gamma    = parameters[3];
dx1 = sin(t)**2
dx2 = x[1]
dx3 = x[2]
dx4 = x[3]
return(list(c(dx1,dx2,dx3, dx4)))
}
t.data <- seq(0, 10, length.out = 100)
state <- x0
Lorenz <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
dx1 <- sin(t) ** 2
dx2 <- x1
dx3 <- x2
dx4 <- x3
list(c(dx1,dx2,dx3, dx4))
})
}
out <- ode(y = state, times = t.data, func = Lorenz, parms = parameters)
head(out)
library(deSolve)
parameters = c(5, 2,1)
x0 = c( 0 , 0 ,0, 0)
testModel <- function(t,x,parameters) {
A        = parameters[1];
omega    = parameters[2];
gamma    = parameters[3];
dx1 = sin(t)**2
dx2 = x[1]
dx3 = x[2]
dx4 = x[3]
return(list(c(dx1,dx2,dx3, dx4)))
}
t.data <- seq(0, 10, length.out = 100)
state <- x0
Lorenz <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
dx1 <- sin(t) ** 2
dx2 <- x1
dx3 <- x2
dx4 <- x3
list(c(dx1,dx2,dx3, dx4))
})
}
out <- ode(y = state, times = t.data, func = Lorenz, parms = parameters)
t.data <- seq(0, 10, length.out = 100)
state <- c( x1 = 0, x2 = 0 , x3 = 0, x4 = 0)
Lorenz <- function(t, state, parameters) {
with(as.list(c(state, parameters)),{
dx1 <- sin(t) ** 2
dx2 <- x1
dx3 <- x2
dx4 <- x3
list(c(dx1,dx2,dx3, dx4))
})
}
out <- ode(y = state, times = t.data, func = Lorenz, parms = parameters)
head(out)
plot(out)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
testModel
testModel[1]
testModel[dx1]
testModel["dx1"]
testModel[]
testModel
testModel()
testModel?
test
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
head(output)
head(output)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
library(deSolve)
parameters = c(1, 2)
x0 = c(0,0,0,0)
testModel <- function(t,x,parameters) {
a        = parameters[1];
omega    = parameters[2];
dx1 = a * sin(omega * t)**2
dx2 = x[1]
dx3 = x[2]
dx4 = x[3]
return(list(c(dx1,dx2,dx3, dx4)))
}
testMessure <- function(x) {
offset = 1.0e-5
scale = 1
y1 = offset + x[,1]
y2 = offset + x[,2]
y3 = offset + x[,3]
y4 = x[,4]
return(list(y1,y2,y3,y4))
}
t.data <- seq(0, 10, length.out = 100)
parameters.solve <- c(a = parameters[1], omega = parameters[2], gamma = 5)
state <- c( x1 = x0[1], x2 = x0[2] , x3 = x0[3], x4 = x0[4])
Lorenz <- function(t, state, parameters.solve) {
with(as.list(c(state, parameters.solve)),{
dx1 <- a * sin(omega * t)
dx2 <- x1
dx3 <- x2 + 1./(x3- gamma)
dx4 <- x3
list(c(dx1,dx2,dx3, dx4))
})
}
out <- ode(y = state, times = t.data, func = Lorenz, parms = parameters.solve)
head(out)
plot(out)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
Lorenz <- function(t, state, parameters.solve) {
with(as.list(c(state, parameters.solve)),{
dx1 <- a * sin(omega * t)
dx2 <- x1
dx3 <- x2 + Perturbation(t,x1,x2,x3,x4, Gamma, h)
dx4 <- x3
list(c(dx1,dx2,dx3, dx4))
})
}
out <- ode(y = state, times = t.data, func = Lorenz, parms = parameters.solve)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
out
head(
out[,1]
)
head(
out[,1]
)
head(
out[,2]
)
t.plot <- out["t"]
t.plot
t.plot <- out[,1]
t.plot
parameters.solve
parameters.solve["Gamma"]
parameters.solve["Gamma"][1]
parameters.solve["Gamma"][,1]
parameters.solve["Gamma"][1,]
parameters.solve["Gamma"][1]
parameters.solve["Gamma"]
parameters.solve[3]
plot(out)
t.plot  <- out[,1]
x1.plot <- out[,2]
x2.plot <- out[,3]
x3.plot <- out[,4]
x4.plot <- out[,5]
y.plot <- rep(0, length(t.plot) )
for (i in 1:length(t.plot) ) {
y.plot[i] <- Perturbation(t.plot[i], x1.plot[i], x2.plot[i], x3.plot[i], x4.plot[i],
parameters.solve["Gamma"], parameters.solve["h"])
}
plot(t.plot, y.plot)
dev.new()
plot(out)
plot(t.plot, y.plot)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
output <- data.frame("t" = out[,1],"x1" = out[,2], "x2" = out[,3], "x3" = out[,4], "x4" = out[,5])
plot(t.plot, y.plot)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
plot(out)
library(deSolve)
parameters = c(1, 2)
x0 = c(0,0,0,0)
testModel <- function(t,x,parameters) {
a        = parameters[1];
omega    = parameters[2];
dx1 = a * sin(omega * t)**2
dx2 = x[1]
dx3 = x[2]
dx4 = x[3]
return(list(c(dx1,dx2,dx3, dx4)))
}
testMessure <- function(x) {
offset = 1.0e-5
scale = 1
y1 = x[,1]
y2 = x[,2]
y3 = x[,3]
y4 = x[,4]
return(list(y1,y2,y3,y4))
}
t.data <- seq(0, 10, length.out = 100)
parameters.solve <- c(a = parameters[1], omega = parameters[2], Gamma = 0.2, h = 20)
state <- c( x1 = x0[1], x2 = x0[2] , x3 = x0[3], x4 = x0[4])
Perturbation <- function(t,x1,x2,x3,x4, Gamma, t.centre) {
perturbation.temp <- 0
#  if (  t < t.centre + Gamma && t > t.centre - Gamma ) {
#    perturbation.temp <- h
#  } else {
#    perturbation.temp <- 0.0
#  }
perturbation.temp <- Gamma / (Gamma ** 2 + (t - t.centre)**2)
return(perturbation.temp)
}
Lorenz <- function(t, state, parameters.solve) {
with(as.list(c(state, parameters.solve)),{
dx1 <- a * sin(omega * t)
dx2 <- x1
dx3 <- x2 + Perturbation(t,x1,x2,x3,x4, Gamma, h)
dx4 <- x3
list(c(dx1,dx2,dx3, dx4))
})
}
out <- ode(y = state, times = t.data, func = Lorenz, parms = parameters.solve)
head(out)
plot(out)
t.plot  <- out[,1]
x1.plot <- out[,2]
x2.plot <- out[,3]
x3.plot <- out[,4]
x4.plot <- out[,5]
y.plot <- rep(0, length(t.plot) )
for (i in 1:length(t.plot) ) {
y.plot[i] <- Perturbation(t.plot[i], x1.plot[i], x2.plot[i], x3.plot[i], x4.plot[i],
parameters.solve["Gamma"], parameters.solve["h"])
}
plot(t.plot, y.plot)
output <- data.frame("t" = out[,1],"x1" = out[,2], "x2" = out[,3], "x3" = out[,4], "x4" = out[,5])
t.data <- seq(0, 10, length.out = 100)
parameters.solve <- c(a = parameters[1], omega = parameters[2], Gamma = 0.2, h = t.data[40])
state <- c( x1 = x0[1], x2 = x0[2] , x3 = x0[3], x4 = x0[4])
Perturbation <- function(t,x1,x2,x3,x4, Gamma, t.centre) {
perturbation.temp <- 0
#  if (  t < t.centre + Gamma && t > t.centre - Gamma ) {
#    perturbation.temp <- h
#  } else {
#    perturbation.temp <- 0.0
#  }
perturbation.temp <- Gamma / (Gamma ** 2 + (t - t.centre)**2)
return(perturbation.temp)
}
Lorenz <- function(t, state, parameters.solve) {
with(as.list(c(state, parameters.solve)),{
dx1 <- a * sin(omega * t)
dx2 <- x1
dx3 <- x2 + Perturbation(t,x1,x2,x3,x4, Gamma, h)
dx4 <- x3
list(c(dx1,dx2,dx3, dx4))
})
}
out <- ode(y = state, times = t.data, func = Lorenz, parms = parameters.solve)
head(out)
plot(out)
t.plot  <- out[,1]
x1.plot <- out[,2]
x2.plot <- out[,3]
x3.plot <- out[,4]
x4.plot <- out[,5]
y.plot <- rep(0, length(t.plot) )
for (i in 1:length(t.plot) ) {
y.plot[i] <- Perturbation(t.plot[i], x1.plot[i], x2.plot[i], x3.plot[i], x4.plot[i],
parameters.solve["Gamma"], parameters.solve["h"])
}
plot(t.plot, y.plot)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
library(deSolve)
parameters = c(1, 2)
x0 = c(0,0,0,0)
testModel <- function(t,x,parameters) {
a        = parameters[1];
omega    = parameters[2];
dx1 = a * sin(omega * t)**2
dx2 = x[1]
dx3 = x[2]
dx4 = x[3]
return(list(c(dx1,dx2,dx3, dx4)))
}
testMessure <- function(x) {
offset = 1.0e-5
scale = 1
y1 = x[,1]
y2 = x[,2]
y3 = x[,3]
y4 = x[,4]
return(list(y1,y2,y3,y4))
}
t.data <- seq(0, 10, length.out = 100)
parameters.solve <- c(a = parameters[1], omega = parameters[2], Gamma = 1, h = t.data[40])
state <- c( x1 = x0[1], x2 = x0[2] , x3 = x0[3], x4 = x0[4])
Perturbation <- function(t,x1,x2,x3,x4, Gamma, t.centre) {
perturbation.temp <- 0
#  if (  t < t.centre + Gamma && t > t.centre - Gamma ) {
#    perturbation.temp <- h
#  } else {
#    perturbation.temp <- 0.0
#  }
perturbation.temp <- Gamma / (Gamma ** 2 + (t - t.centre)**2)
return(perturbation.temp)
}
Lorenz <- function(t, state, parameters.solve) {
with(as.list(c(state, parameters.solve)),{
dx1 <- a * sin(omega * t)
dx2 <- x1
dx3 <- x2 + Perturbation(t,x1,x2,x3,x4, Gamma, h)
dx4 <- x3
list(c(dx1,dx2,dx3, dx4))
})
}
out <- ode(y = state, times = t.data, func = Lorenz, parms = parameters.solve)
head(out)
plot(out)
source('~/R/OptimalControl/Controllability/Test1_singularity.R', echo=TRUE)
source('~/R/OptimalControl/Controllability/Test_deSolve.R', echo=TRUE)
Lorenz <- function(t, state, parameters.solve) {
with(as.list(c(state, parameters.solve)),{
dx1 <- a * sin(omega * t) * cos(omega * t)
dx2 <- x1
dx3 <- x2 + Perturbation(t,x1,x2,x3,x4, Gamma, peak, t.centre)
dx4 <- x3
list(c(dx1,dx2,dx3, dx4))
})
}
out <- ode(y = state, times = t.data, func = Lorenz, parms = parameters.solve)
plot(out)
source('~/R/OptimalControl/ElasticNet_regularization/main.R', echo=TRUE)
