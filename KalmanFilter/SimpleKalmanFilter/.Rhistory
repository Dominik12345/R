state.data[1,-1]
state.data[1,-1]["x1"]
observation.data <- data.frame("times" = state.data$times)
observation.data["y1"] <- NA
observation.data["y2"] <- NA
for (i in 1:time.number) {
observation.data[i,-1] <- system.Observation(x = state.data[i,-1],
t = observation.data$times[i],
params = system.parameters)
}
for (i in 1:length(time.sequence)) {
observation.data[i,-1] <- system.Observation(x = state.data[i,-1],
t = observation.data$times[i],
params = system.parameters)
}
# <--- SAMPLE DATA
# INITIALIZE POMP OBJECT --->
pomp.initialize <- function(params, t0, ...) {
with(as.list(params), {
temp1 <- x1.0 + rnorm(n = 1, mean = 0, sd = sigma1)
temp2 <- x2.0 + rnorm(n = 1, mean = 0, sd = sigma2)
out <- c("x1" = temp1, "x2" = temp2)
return(out)
})
}
# convert into dataframe
IVP.solution <- data.frame( "time" = IVP.solution[,1], "x1" = IVP.solution[,2],
"x2" = IVP.solution[,3])
# SAMPLE OBSERVATION DATA --->
observation.data <- data.frame("time" = IVP.solution$time)
observation.data["y1"] <- NA
observation.data["y2"] <- NA
for (i in 1:number.measurements) {
observation.data[i,-1] <- system.Observation(observation.data$time[i],
c( IVP.solution$x1[i],IVP.solution$x2[i] ) )
}
IVP.solution
IVP.solution[3,-1]
IVP.solution[3,-1]["x1"]
# SAMPLE OBSERVATION DATA --->
observation.data <- data.frame("time" = IVP.solution$time)
observation.data["y1"] <- NA
observation.data["y2"] <- NA
for (i in 1:length(time.sequence)) {
observation.data[i,-1] <- system.Observation(x = IVP.solution[i,-1],
t =  observation.data$time[i],
params = system.parameters)
}
# WRITE DATA INTO TXT --->
write.table(IVP.solution ,'state.data.txt', sep="\t")
write.table(observation.data, 'observation.data.txt',sep = "\t")
plot(IVP.solution)
plot(observation.data)
# Kalman filtering algorithm
library(pomp)
observation.data <- read.table('observation.data.txt')
state.data <- read.table('state.data.txt')
# read model
source("SystemEquation.R")
# CONVERT DATA INTO POMP OBJECT --->
pomp.object <- pomp(
data   = observation.data        ,
times  = "time"                  ,
t0     = observation.data$time[1],
params = system.parameters,
rprocess = euler.sim(step.fun = system.Dynamic, delta.t = time.delta),
rmeasure = system.Observation,
initializer = pomp.initialize,
)
pomp.object
pomp.object@data
state.data
observation.data
pomp.object@rprocess()
pomp.object@rprocess
system.observation.covariance()
library(deSolve)
#get the system equations and initial value
source('SystemEquation.R')
IVP.Function <- function(t, state, parameters) {
with(as.list(c(state,parameters)),{
dx <- system.Dynamic(x = state, t = t, params = parameters ,delta.t = time.delta)
return(list(dx) )
})
}
sample.state <- c("x1" = system.parameters[["x1.0"]], "x2" = system.parameters[["x2.0"]])
IVP.solution <- ode(y = sample.state,
times = time.sequence,
func = IVP.Function,
parms = system.parameters)
# convert into dataframe
IVP.solution <- data.frame( "time" = IVP.solution[,1], "x1" = IVP.solution[,2],
"x2" = IVP.solution[,3])
# SAMPLE OBSERVATION DATA --->
observation.data <- data.frame("time" = IVP.solution$time)
observation.data["y1"] <- NA
observation.data["y2"] <- NA
for (i in 1:length(time.sequence)) {
observation.data[i,-1] <- system.Observation(x = IVP.solution[i,-1],
t =  observation.data$time[i],
params = system.parameters)
}
# WRITE DATA INTO TXT --->
write.table(IVP.solution ,'state.data.txt', sep="\t")
write.table(observation.data, 'observation.data.txt',sep = "\t")
system.parameters
library(deSolve)
#get the system equations and initial value
source('SystemEquation.R')
IVP.Function <- function(t, state, parameters) {
with(as.list(c(state,parameters)),{
dx <- system.Dynamic(x = state, t = t, params = parameters ,delta.t = time.delta)
return(list(dx) )
})
}
sample.state <- c("x1" = system.parameters[["x1.0"]], "x2" = system.parameters[["x2.0"]])
IVP.solution <- ode(y = sample.state,
times = time.sequence,
func = IVP.Function,
parms = system.parameters)
# convert into dataframe
IVP.solution <- data.frame( "time" = IVP.solution[,1], "x1" = IVP.solution[,2],
"x2" = IVP.solution[,3])
# SAMPLE OBSERVATION DATA --->
observation.data <- data.frame("time" = IVP.solution$time)
observation.data["y1"] <- NA
observation.data["y2"] <- NA
for (i in 1:length(time.sequence)) {
observation.data[i,-1] <- system.Observation(x = IVP.solution[i,-1],
t =  observation.data$time[i],
params = system.parameters)
}
library(deSolve)
#get the system equations and initial value
source('SystemEquation.R')
IVP.Function <- function(t, state, parameters) {
with(as.list(c(state,parameters)),{
dx <- system.Dynamic(x = state, t = t, params = parameters ,delta.t = time.delta)
return(list(dx) )
})
}
sample.state <- c("x1" = system.parameters[["x1.0"]], "x2" = system.parameters[["x2.0"]])
IVP.solution <- ode(y = sample.state,
times = time.sequence,
func = IVP.Function,
parms = system.parameters)
# convert into dataframe
IVP.solution <- data.frame( "time" = IVP.solution[,1], "x1" = IVP.solution[,2],
"x2" = IVP.solution[,3])
# SAMPLE OBSERVATION DATA --->
observation.data <- data.frame("time" = IVP.solution$time)
observation.data["y1"] <- NA
observation.data["y2"] <- NA
for (i in 1:length(time.sequence)) {
observation.data[i,-1] <- system.Observation(x = IVP.solution[i,-1],
t =  observation.data$time[i],
params = system.parameters)
}
# WRITE DATA INTO TXT --->
write.table(IVP.solution ,'state.data.txt', sep="\t")
write.table(observation.data, 'observation.data.txt',sep = "\t")
# Kalman filtering algorithm
library(pomp)
observation.data <- read.table('observation.data.txt')
state.data <- read.table('state.data.txt')
plot(state.data)
plot(observation.data)
# read model
source("SystemEquation.R")
# CONVERT DATA INTO POMP OBJECT --->
pomp.object <- pomp(
data   = observation.data        ,
times  = "time"                  ,
t0     = observation.data$time[1],
params = system.parameters,
rprocess = euler.sim(step.fun = system.Dynamic, delta.t = time.delta),
rmeasure = system.Observation,
initializer = pomp.initialize,
)
pomp.object
coeff(pomp.object)
coef(pomp.object)
system.ObservationCovariance(params = system.parameters)
system.ObservationCovariance(params = coef(pomp.object))
pomp.filter <- enkf(object = pomp.object,
Np = 3,
verbose = FALSE,
params = coef(pomp.object),
h = system.ExpectedObservation,
R = system.ObservationCovariance(params = coef(pomp.object))
)
pomp.filter
colnames(pomp.filter@filter.mean) <- c() # thereÂ´s no better solution yet
forecast.data <- data.frame("time" = pomp.filter@times,
"x1" = pomp.filter@filter.mean[1,] ,
"x2" = pomp.filter@filter.mean[2,])
forecast.data["x1.error.absolute"] <- forecast.data$x1 - state.data$x1
forecast.data["x2.error.absolute"] <- forecast.data$x2 - state.data$x2
forecast.data["x1.error.relative"] <- forecast.data$x1.error.absolute/state.data$x1
forecast.data["x2.error.relative"] <- forecast.data$x2.error.absolute/state.data$x2
# PLOT --->
par(mfrow = c(2,2) )
xmin <- min(observation.data$time)
xmax <- max(observation.data$time)
ymin <- min(observation.data$y1, observation.data$y2)
ymax <- max(observation.data$y1, observation.data$y2)
plot(observation.data$time , observation.data$y1, xlab = "time", ylab = "",
type = "n", xlim = c(xmin,xmax), ylim = c(ymin,ymax) )
lines(observation.data$time ,observation.data$y1  ,lty = 1)
lines(observation.data$time ,observation.data$y2  ,lty = 2)
legend("topleft", c("y1", "y2"), lty = c(1,2))
title("Observation")
xmin <- min(state.data$time)
xmax <- max(state.data$time)
ymin <- min(forecast.data$x1, state.data$x1)
ymax <- max(forecast.data$x1, state.data$x1)
plot(state.data$time , state.data$x1, xlab = "time", ylab = "",
type = "n", xlim = c(xmin,xmax), ylim = c(ymin,ymax))
lines(state.data$time, state.data$x1  ,lty = 1)
lines(forecast.data$time, forecast.data$x1  ,lty = 2)
legend("topleft", c("x1_true", "x1_forecast"), lty = c(1,2))
title("x1")
xmin <- min(state.data$time)
xmax <- max(state.data$time)
ymin <- min(forecast.data$x2, state.data$x2)
ymax <- max(forecast.data$x2, state.data$x2)
plot(forecast.data$time , state.data$x2, xlab = "time", ylab = "",
type = "n", xlim = c(xmin,xmax), ylim = c(ymin,ymax))
lines(state.data$time, state.data$x2  ,lty = 1)
lines(forecast.data$time, forecast.data$x2  ,lty = 2)
legend("topleft", c("x2_true", "x2_forecast"), lty = c(1,2))
title("x2")
xmin <- min(forecast.data$time)
xmax <- max(forecast.data$time)
ymin <- min(forecast.data$x1.error.absolute, forecast.data$x2.error.absolute)
ymax <- max(forecast.data$x1.error.absolute, forecast.data$x2.error.absolute)
plot(forecast.data$time , forecast.data$x1.error.absolute, xlab = "time", ylab = "",
type = "n" , xlim = c(xmin,xmax), ylim = c(ymin,ymax))
lines(forecast.data$time, forecast.data$x1.error.absolute  ,lty = 1)
lines(forecast.data$time, forecast.data$x2.error.absolute  ,lty = 2)
legend("topleft", c("Delta x1", "Delta x2"), lty = c(1,2))
title("Absolute Errors")
# <--- PLOT
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
system.Dynamic
f <- function( x, t, params, delta.t,...) {
with(as.list(c(x,params)),{
temp <- system.Dynamic(x = x,t = t, params = params,delta.t = delta.t)
temp = temp * delta.t + x
out <- c("x1" = temp[[1]], "x2" = temp[[2]])
return(out)
})
}
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
temp <- c("a" = 1, "b" = 2*a)
temp <- c("a" = 1, "b" = 2*"a")
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
ymax = max(pomp.results@data[1,],pomp.results@data[2,] )
ymin = min(pomp.results@data[1,],pomp.results@data[2,] )
plot( pomp.results@data[1,] , xlab = "time step", ylab = "",
type = "n", ylim = c(ymin,ymax) )
lines(pomp.results@data[1,] , lty = 1 )
lines(pomp.results@data[2,] , lty = 2 )
legend("topright", c("y1", "y2"), lty = c(1,2))
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
library(deSolve)
#get the system equations and initial value
source('SystemEquation.R')
IVP.Function <- function(t, state, parameters) {
with(as.list(c(state,parameters)),{
dx <- system.Dynamic(x = state, t = t, params = parameters ,delta.t = time.delta)
return(list(dx) )
})
}
sample.state <- c("x1" = system.parameters[["x1.0"]], "x2" = system.parameters[["x2.0"]])
IVP.solution <- ode(y = sample.state,
times = time.sequence,
func = IVP.Function,
parms = system.parameters)
# convert into dataframe
IVP.solution <- data.frame( "time" = IVP.solution[,1], "x1" = IVP.solution[,2],
"x2" = IVP.solution[,3])
# SAMPLE OBSERVATION DATA --->
observation.data <- data.frame("time" = IVP.solution$time)
observation.data["y1"] <- NA
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
c(a = 1, b=2)
temp <- c(a = 1, b=2)
with(as.list(temp),{})
with(as.list(temp),{ a })
with(as.list(temp),{ a^2 })
with(as.list(temp),{ a^3 })
with(as.list(temp),{ sqrt(b) })
# set the initial state value
system.parameters <- c("x1.0" = 1.10, "x2.0" = 2.5,
"a" = 0.1, "b" = 0.2,
"sigma1" = 0.001, "sigma2" = 0.01,
"sigma3" = 0.01, "sigma4" = 0.01)
# define the system dynamics with state x1,x2 and parameters a,b
system.Dynamic <- function( x, t, params, delta.t,...) {
with(as.list(c(x,params)),{
temp1 <- a * sqrt(x2)   + rnorm(n = 1 , mean = 0, sd = sigma1)
temp2 <- -b * x1    + rnorm(n = 1 , mean = 0, sd = sigma2)
out <- c("x1" = temp1, "x2" = temp2)
return(out)
})
}
system.Dynamic(x = c(1,2),t = 1,params = c(sigma1 = 1, sigma2 = 3))
system.Dynamic(x = c(1,2),t = 1,params = c(a=1,b=1, sigma1 = 1, sigma2 = 3))
system.Dynamic(x = c(x1=1,x2=2),t = 1,params = c(a=1,b=1, sigma1 = 1, sigma2 = 3))
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
system.Dynamic(x = c(x1=1,x2=2),t = 1,params = c(a=1,b=1, sigma1 = 1, sigma2 = 3))
system.Dynamic(x = c(x1=1,x2=2),t = 1,params = c(a=1,b=1, sigma1 = 1, sigma2 = 3))
system.Dynamic(x = c(x1=1,x2=2),t = 1,params = c(a=1,b=1, sigma1 = 1, sigma2 = 3))
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/sample_data.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', echo=TRUE)
