system.parameters <- c("x1.0" = 1 , "x2.0" = 1, "a" = 1, "b" =1,
"sigma1" = 0.1, "sigma2" = 0.1, "sigma3" = 0.1, "sigma4" = 0.1)
system.Dynamic <- function( x, t, params, delta.t,...) {
with(as.list(c(x,params)), {
temp1 <- b * x2^2 - a * x1 + rnorm(n = 1, mean = 0, sd = sigma1)
temp2 <- b * x1 - a * x2   + rnorm(n = 1, mean = 0, sd = sigma2)
out <- c("x1" <- temp1, "x2" <- temp2)
return(out)
})
}
system.Observation <- function(x, t, params, ...) {
with(as.list(c(x,params)),{
temp1 <- x1 * x2 + rnorm(n = 1, mean = 0, sd = sigma3)
temp2 <- x1 + x2 + rnorm(n = 1, mean = 0, sd = sigma4)
out <- c("y1" = temp1, "y2" = temp2)
return(out)
})
}
state.data <- data.frame("times" = time.sequence)
state.data["x1"] <- NA
state.data["x2"] <- NA
# LOAD PACKAGE --->
library(pomp)
# DEFINE THE DYNAMIC SYSTEM --->
time.initial <- 0
time.final <- 10
time.delta <- 1
time.sequence <- seq(from = time.initial, to = time.final,by = time.delta)
time.number <- length(time.sequence)
system.parameters <- c("x1.0" = 1 , "x2.0" = 1, "a" = 1, "b" =1,
"sigma1" = 0.1, "sigma2" = 0.1, "sigma3" = 0.1, "sigma4" = 0.1)
system.Dynamic <- function( x, t, params, delta.t,...) {
with(as.list(c(x,params)), {
temp1 <- b * x2^2 - a * x1 + rnorm(n = 1, mean = 0, sd = sigma1)
temp2 <- b * x1 - a * x2   + rnorm(n = 1, mean = 0, sd = sigma2)
out <- c("x1" <- temp1, "x2" <- temp2)
return(out)
})
}
system.Observation <- function(x, t, params, ...) {
with(as.list(c(x,params)),{
temp1 <- x1 * x2 + rnorm(n = 1, mean = 0, sd = sigma3)
temp2 <- x1 + x2 + rnorm(n = 1, mean = 0, sd = sigma4)
out <- c("y1" = temp1, "y2" = temp2)
return(out)
})
}
state.data <- data.frame("times" = time.sequence)
state.data["x1"] <- NA
state.data["x2"] <- NA
state.data[1,-1] <- c(system.parameters["x1.0"], system.parameters["x2.0"])
for (i in 2:time.number) {
state.data[i,-1] <- system.Dynamic(t = state.data$times[i-1],
x = c(state.data$x1[i-1],state.data$x2[i-1]),
params = system.parameters,
delta.t = time.delta )
}
state.data
state.data$x1
state.data["x1"]
state.data["x1"][1]
state.data["x1",1]
state.data["x1",2]
state.data["x1",0]
state.data[1,"x1"]
state.data[2,"x1"]
state.data["x1"]
state.data[1]
state.data[,1]
state.data[1,]
state.data[1,-1]
temp <- state.data[1,-1]
temp
temp["x1"]
temp["x2"]
c("x1" = 1, "x2" = 2)
c(temp)
for (i in 2:time.number) {
state.data[i,-1] <- system.Dynamic(t = state.data$times[i-1],
x = state.data[i-1,-1],
params = system.parameters,
delta.t = time.delta )
}
plot(state.data)
plot(state.data$time, state.data$x1)
plot(state.data$time, state.data$x2)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
plot(state.data$time, state.data$x2)
plot(state.data$time, state.data$x1)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
plot(state.data$time, state.data$x1)
plot(state.data$time, state.data$x2)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
plot(state.data$time, state.data$x2)
plot(state.data$time, state.data$x1)
state.data
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
state.data
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
state.data
state.data$x1
# LOAD PACKAGE --->
library(pomp)
# DEFINE THE DYNAMIC SYSTEM --->
time.initial <- 0
time.final <- 5
time.delta <- 1
time.sequence <- seq(from = time.initial, to = time.final,by = time.delta)
time.number <- length(time.sequence)
system.parameters <- c("x1.0" = 1 , "x2.0" = 1, "a" = 1, "b" =0.1,
"sigma1" = 0.1, "sigma2" = 0.1, "sigma3" = 0.1, "sigma4" = 0.1)
system.Dynamic <- function( x, t, params, delta.t,...) {
with(as.list(c(x,params)), {
temp1 <- b * x2^2 - a * x1 + rnorm(n = 1, mean = 0, sd = sigma1)
temp2 <- b * x1 - a * x2   + rnorm(n = 1, mean = 0, sd = sigma2)
out <- c("x1" <- temp1, "x2" <- temp2)
return(out)
})
}
system.Observation <- function(x, t, params, ...) {
with(as.list(c(x,params)),{
temp1 <- x1 * x2 + rnorm(n = 1, mean = 0, sd = sigma3)
temp2 <- x1 + x2 + rnorm(n = 1, mean = 0, sd = sigma4)
out <- c("y1" = temp1, "y2" = temp2)
return(out)
})
}
state.data <- data.frame("times" = time.sequence)
state.data["x1"] <- NA
state.data["x2"] <- NA
state.data[1,-1] <- c(system.parameters["x1.0"], system.parameters["x2.0"])
for (i in 2:time.number) {
state.data[i,-1] <- system.Dynamic(t = state.data$times[i-1],
x = state.data[i-1,-1],
params = system.parameters,
delta.t = time.delta )
}
observation.data <- data.frame("times" = state.data$times)
observation.data["y1"] <- NA
observation.data["y2"] <- NA
for (i in 1:time.number) {
observation.data[i,-1] <- system.Observation(t = observation.data$times[i],
x = state.data[i,-1],
params = system.parameters )
}
state.data
observation.data
# <--- SAMPLE DATA
# INITIALIZE POMP OBJECT --->
pomp.initialize <- function(params, t0, ...) {
with(as.list(params), {
temp1 <- x1.0 + rnorm(n = 1, mean = 0, sd = sigma1)
temp2 <- x2.0 + rnorm(n = 1, mean = 0, sd = sigma2)
out <- c("x1" = temp1, "x2" = temp2)
return(out)
})
}
pomp.object <- pomp( data = observation.data,
times = "times", t0 = time.initial,
rprocess = discrete.time.sim(step.fun = system.Dynamic, delta.t),
rmeasure = system.Observation,
initializer = pomp.initialize,
params = system.parameters
)
# <--- SAMPLE DATA
# INITIALIZE POMP OBJECT --->
pomp.initialize <- function(params, t0, ...) {
with(as.list(params), {
temp1 <- x1.0 + rnorm(n = 1, mean = 0, sd = sigma1)
temp2 <- x2.0 + rnorm(n = 1, mean = 0, sd = sigma2)
out <- c("x1" = temp1, "x2" = temp2)
return(out)
})
}
pomp.object <- pomp( data = observation.data,
times = "times", t0 = time.initial,
rprocess = discrete.time.sim(step.fun = system.Dynamic, delta.t = time.delta),
rmeasure = system.Observation,
initializer = pomp.initialize,
params = system.parameters
)
pomp.object
pomp.object@data
pomp.object@times
pomp.simulation <- simulate(pomp.object, nsim = 1)
pomp.simulation
pomp.simulation@data
coef(pomp.object)
coef(pomp.simulation)
?enkf
# FILTER DATA --->
pomp.results <- enkf(object = pomp.simulation)
system.ExpectedObservation <- function(x,t,params,...) {
with(as.list(c(x,params)),{
temp1 <- x1 * x2
temp2 <- x1 + x2
out <- c("y1" = temp1, "y2" = temp2)
return(out)
})
}
# FILTER DATA --->
pomp.results <- enkf(object = pomp.simulation,
Np = 3,
verbose = FALSE,
h = system.ExpectedObservation,
R = matrix(c(system.parameters["sigma3"],0,0,
system.parameters["sigma4"]),ncol = 2)
)
coef(pomp.simulation)
# FILTER DATA --->
pomp.results <- enkf(object = pomp.simulation,
Np = 3,
verbose = FALSE,
params = coef(pomp.simulation)
h = system.ExpectedObservation,
R = matrix(c(system.parameters["sigma3"],0,0,
system.parameters["sigma4"]),ncol = 2)
)
# FILTER DATA --->
pomp.results <- enkf(object = pomp.simulation,
Np = 3,
verbose = FALSE,
params = coef(pomp.simulation),
h = system.ExpectedObservation,
R = matrix(c(system.parameters["sigma3"],0,0,
system.parameters["sigma4"]),ncol = 2)
)
system.Observation <- function(x, t, params, ...) {
with(as.list(c(x,params)),{
temp1 <- x1 * x2 + rnorm(n = 1, mean = 0, sd = sigma3)
temp2 <- x1 + x2 + rnorm(n = 1, mean = 0, sd = sigma4)
out <- c("y1" = temp1, "y2" = temp2)
return(out)
})
}
system.ExpectedObservation <- function(x,t,) {
with(as.list(c(x)),{
temp1 <- x1 * x2
temp2 <- x1 + x2
out <- c("y1" = temp1, "y2" = temp2)
return(out)
})
}
system.Observation <- function(x, t, params, ...) {
with(as.list(c(x,params)),{
temp1 <- x1 * x2 + rnorm(n = 1, mean = 0, sd = sigma3)
temp2 <- x1 + x2 + rnorm(n = 1, mean = 0, sd = sigma4)
out <- c("y1" = temp1, "y2" = temp2)
return(out)
})
}
system.ExpectedObservation <- function(x,t,) {
with(as.list(x),{
temp1 <- x1 * x2
temp2 <- x1 + x2
out <- c("y1" = temp1, "y2" = temp2)
return(out)
})
}
system.ExpectedObservation <- function(x,t) {
with(as.list(x),{
temp1 <- x1 * x2
temp2 <- x1 + x2
out <- c("y1" = temp1, "y2" = temp2)
return(out)
})
}
state.data <- data.frame("times" = time.sequence)
state.data["x1"] <- NA
state.data["x2"] <- NA
state.data[1,-1] <- c(system.parameters["x1.0"], system.parameters["x2.0"])
for (i in 2:time.number) {
state.data[i,-1] <- system.Dynamic(t = state.data$times[i-1],
x = state.data[i-1,-1],
params = system.parameters,
delta.t = time.delta )
}
observation.data <- data.frame("times" = state.data$times)
observation.data["y1"] <- NA
observation.data["y2"] <- NA
for (i in 1:time.number) {
observation.data[i,-1] <- system.Observation(t = observation.data$times[i],
x = state.data[i,-1],
params = system.parameters )
}
# <--- SAMPLE DATA
# INITIALIZE POMP OBJECT --->
pomp.initialize <- function(params, t0, ...) {
with(as.list(params), {
temp1 <- x1.0 + rnorm(n = 1, mean = 0, sd = sigma1)
temp2 <- x2.0 + rnorm(n = 1, mean = 0, sd = sigma2)
out <- c("x1" = temp1, "x2" = temp2)
return(out)
})
}
pomp.object <- pomp( data = observation.data,
times = "times", t0 = time.initial,
rprocess = discrete.time.sim(step.fun = system.Dynamic, delta.t = time.delta),
rmeasure = system.Observation,
initializer = pomp.initialize,
params = system.parameters
)
pomp.simulation <- simulate(pomp.object, nsim = 1)
# FILTER DATA --->
pomp.results <- enkf(object = pomp.simulation,
Np = 3,
verbose = FALSE,
params = coef(pomp.simulation),
h = system.ExpectedObservation,
R = matrix(c(system.parameters["sigma3"],0,0,
system.parameters["sigma4"]),ncol = 2)
)
pomp.results
pomp.results@forecast
pomp.results@filter.mean
plot(pomp.results@filter.mean)
plot(pomp.results@filter.mean)
plot(pomp.results@filter.mean[1,])
plot(pomp.results@filter.mean[2,])
plot(pomp.results@filter.mean[1,])
# FILTER DATA --->
pomp.results <- enkf(object = pomp.simulation,
Np = 3,
verbose = FALSE,
params = coef(pomp.simulation),
h = system.ExpectedObservation,
R = matrix(c(params["sigma3"],0,0,
params["sigma4"]),ncol = 2)
)
# FILTER DATA --->
pomp.results <- enkf(object = pomp.simulation,
Np = 3,
verbose = FALSE,
params = coef(pomp.simulation),
h = system.ExpectedObservation,
R = matrix(c(coef(pomp.simulation)["sigma3"],0,0,
coef(pomp.simulation)["sigma4"]),ncol = 2)
)
# PLOT RESULTS --->
par(mfrow = c(1,2) )
plot(pomp.results@filter.mean[1,], xlab = "time", ylab = "",
type = "n")
lines(pomp.results@filter.mean[1,]    ,lty = 1)
lines(state.data$time, state.data$x1  ,lty = 2)
legend("topleft", c("x1_filter", "x1_true"), lty = c(1,2))
title("x1")
plot(pomp.results@filter.mean[2,], xlab = "time", ylab = "",
type = "n")
lines(pomp.results@filter.mean[2,]    ,lty = 1)
lines(state.data$time, state.data$x2  ,lty = 2)
legend("topleft", c("x2_filter", "x2_true"), lty = c(1,2))
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/diescrete_time_enkf.R', echo=TRUE)
source('~/R/KalmanFilter/SimpleKalmanFilter/Algortithm.R', encoding = 'UTF-8', echo=TRUE)
